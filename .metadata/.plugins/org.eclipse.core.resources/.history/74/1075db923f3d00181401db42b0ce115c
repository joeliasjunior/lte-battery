#ifndef BASE_BATTERY_H
#define BASE_BATTERY_H

#include <omnetpp.h>

#include "MiXiMDefs.h"
#include "BaseModule.h"
#include "HostState.h"

class MIXIM_API DrawAmount {
public:
  enum PowerType {
    CURRENT,  
    ENERGY    
  };

protected:
  int type;

  double value;

public:
  DrawAmount(int type = CURRENT, double value = 0):
    type(type),
    value(value)
  {}
  virtual ~DrawAmount()
  {}

  virtual int getType() const { return type; }
  virtual double getValue() const { return value; }

  virtual void setType(int t) { type = t; }
  virtual void setValue(double v) { value = v; }
};

class MIXIM_API BaseBattery : public BaseModule {
private:
  BaseBattery(const BaseBattery&);
  BaseBattery& operator=(const BaseBattery&);

public:
  BaseBattery() : BaseModule()
  {}
  BaseBattery(unsigned stacksize) : BaseModule(stacksize)
  {}
  virtual int registerDevice(const std::string& name, int numAccounts) = 0;

  virtual void draw(int drainID, DrawAmount& amount, int account) = 0;

  virtual double getVoltage() const = 0;
  virtual double estimateResidualRelative() const = 0;
  virtual double estimateResidualAbs() const = 0;
  virtual HostState::States getState() const = 0;
};



#endif
